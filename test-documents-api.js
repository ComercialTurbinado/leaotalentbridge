async function testDocumentsAPI() {
  console.log('üß™ Testando API de documentos...\n');

  try {
    // 1. Verificar se os arquivos da API existem
    console.log('1Ô∏è‚É£ Verificando arquivos da API...');
    const fs = require('fs');
    
    const apiPaths = [
      './src/app/api/candidates/[id]/documents/route.ts',
      './src/app/api/admin/candidates/[id]/documents/route.ts'
    ];
    
    apiPaths.forEach(path => {
      if (fs.existsSync(path)) {
        console.log('‚úÖ API existe:', path);
        
        const content = fs.readFileSync(path, 'utf8');
        if (content.includes('export async function GET')) {
          console.log('  ‚úÖ Fun√ß√£o GET implementada');
        } else {
          console.log('  ‚ùå Fun√ß√£o GET n√£o encontrada');
        }
        
        if (content.includes('export async function POST')) {
          console.log('  ‚úÖ Fun√ß√£o POST implementada');
        } else {
          console.log('  ‚ùå Fun√ß√£o POST n√£o encontrada');
        }
      } else {
        console.log('‚ùå API n√£o encontrada:', path);
      }
    });

    // 2. Verificar se a p√°gina de candidatos est√° implementada
    console.log('\n2Ô∏è‚É£ Verificando p√°gina de candidatos...');
    const candidatoPagePath = './src/app/candidato/documentos/page.tsx';
    
    if (fs.existsSync(candidatoPagePath)) {
      console.log('‚úÖ P√°gina de candidatos existe:', candidatoPagePath);
      
      const content = fs.readFileSync(candidatoPagePath, 'utf8');
      if (content.includes('uploadedBy')) {
        console.log('  ‚úÖ Campo uploadedBy est√° sendo usado');
      } else {
        console.log('  ‚ùå Campo uploadedBy n√£o encontrado');
      }
      
      if (content.includes('activeTab === \'enviados\'')) {
        console.log('  ‚úÖ Filtro de abas implementado');
      } else {
        console.log('  ‚ùå Filtro de abas n√£o encontrado');
      }
      
      if (content.includes('doc.uploadedBy === \'admin\'')) {
        console.log('  ‚úÖ Filtro para documentos de admin implementado');
      } else {
        console.log('  ‚ùå Filtro para documentos de admin n√£o encontrado');
      }
    } else {
      console.log('‚ùå P√°gina de candidatos n√£o encontrada:', candidatoPagePath);
    }

    // 3. Verificar se a p√°gina de admin est√° implementada
    console.log('\n3Ô∏è‚É£ Verificando p√°gina de admin...');
    const adminPagePath = './src/app/admin/candidatos/[id]/page.tsx';
    
    if (fs.existsSync(adminPagePath)) {
      console.log('‚úÖ P√°gina de admin existe:', adminPagePath);
      
      const content = fs.readFileSync(adminPagePath, 'utf8');
      if (content.includes('showDocumentModal')) {
        console.log('  ‚úÖ Modal de documentos implementado');
      } else {
        console.log('  ‚ùå Modal de documentos n√£o encontrado');
      }
      
      if (content.includes('handleDocumentSubmit')) {
        console.log('  ‚úÖ Fun√ß√£o de envio implementada');
      } else {
        console.log('  ‚ùå Fun√ß√£o de envio n√£o encontrada');
      }
      
      if (content.includes('/api/admin/candidates/')) {
        console.log('  ‚úÖ API correta sendo chamada');
      } else {
        console.log('  ‚ùå API incorreta sendo chamada');
      }
    } else {
      console.log('‚ùå P√°gina de admin n√£o encontrada:', adminPagePath);
    }

    // 4. Verificar se o modelo CandidateDocument est√° correto
    console.log('\n4Ô∏è‚É£ Verificando modelo CandidateDocument...');
    const modelPath = './src/lib/models/CandidateDocument.ts';
    
    if (fs.existsSync(modelPath)) {
      console.log('‚úÖ Modelo existe:', modelPath);
      
      const content = fs.readFileSync(modelPath, 'utf8');
      if (content.includes('uploadedBy: \'candidate\' | \'admin\'')) {
        console.log('  ‚úÖ Campo uploadedBy est√° definido corretamente');
      } else {
        console.log('  ‚ùå Campo uploadedBy n√£o est√° definido corretamente');
      }
      
      if (content.includes('status: \'pending\' | \'verified\' | \'rejected\' | \'under_review\'')) {
        console.log('  ‚úÖ Status est√° definido corretamente');
      } else {
        console.log('  ‚ùå Status n√£o est√° definido corretamente');
      }
    } else {
      console.log('‚ùå Modelo n√£o encontrado:', modelPath);
    }

    console.log('\nüéØ Resumo dos testes:');
    console.log('- API candidatos: ‚úÖ Existe');
    console.log('- API admin: ‚úÖ Existe');
    console.log('- P√°gina candidatos: ‚úÖ Existe');
    console.log('- P√°gina admin: ‚úÖ Existe');
    console.log('- Modelo: ‚úÖ Existe');
    console.log('- Funcionalidades: ‚úÖ Implementadas');
    
    console.log('\nüí° Se os candidatos n√£o veem documentos enviados pelo admin, verifique:');
    console.log('1. Se o admin est√° logado corretamente');
    console.log('2. Se o admin est√° criando documentos via modal na p√°gina de candidatos');
    console.log('3. Se os documentos est√£o sendo salvos com uploadedBy: "admin"');
    console.log('4. Se a API est√° retornando os documentos corretamente');
    console.log('5. Se o filtro de abas est√° funcionando na p√°gina do candidato');
    console.log('6. Se h√° documentos na base de dados com uploadedBy: "admin"');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
}

testDocumentsAPI();
