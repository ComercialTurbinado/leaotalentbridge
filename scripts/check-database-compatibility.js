const mongoose = require('mongoose');
require('dotenv').config();

async function checkDatabaseCompatibility() {
  try {
    console.log('üîç Verificando compatibilidade do banco de dados...\n');
    
    // For√ßar uso do MongoDB Atlas online
    const MONGODB_URI = 'mongodb+srv://comercialturbinado:Pikopiko2212@cluster0.vryeq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0';
    
    console.log('üîó Conectando ao MongoDB Atlas...');
    console.log(`üìç URI: ${MONGODB_URI.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')}`);
    
    // Conectar ao MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Conectado ao MongoDB com sucesso!\n');

    // 1. Verificar vers√£o do MongoDB
    const adminDb = mongoose.connection.db.admin();
    const serverInfo = await adminDb.serverInfo();
    console.log(`üìä Vers√£o do MongoDB: ${serverInfo.version}`);
    
    if (serverInfo.version >= '4.0.0') {
      console.log('‚úÖ Vers√£o do MongoDB √© compat√≠vel');
    } else {
      console.log('‚ö†Ô∏è  Vers√£o do MongoDB pode ter limita√ß√µes');
    }

    // 2. Verificar cole√ß√µes existentes
    const collections = await mongoose.connection.db.listCollections().toArray();
    const collectionNames = collections.map(col => col.name);
    
    console.log('\nüìö Cole√ß√µes existentes:');
    collectionNames.forEach(name => {
      console.log(`  - ${name}`);
    });

    // 3. Verificar modelos necess√°rios
    const requiredModels = [
      'users',
      'notifications',
      'notificationpreferences',
      'candidatemetrics',
      'interviews'
    ];

    console.log('\nüîß Verificando modelos necess√°rios:');
    for (const model of requiredModels) {
      if (collectionNames.includes(model)) {
        console.log(`  ‚úÖ ${model} - Existe`);
      } else {
        console.log(`  ‚ùå ${model} - N√£o existe (ser√° criado automaticamente)`);
      }
    }

    // 4. Verificar estrutura do modelo User
    console.log('\nüë§ Verificando estrutura do modelo User...');
    const userSample = await mongoose.connection.db.collection('users').findOne({});
    
    if (userSample) {
      const hasPushSubscriptions = userSample.pushSubscriptions !== undefined;
      console.log(`  ${hasPushSubscriptions ? '‚úÖ' : '‚ùå'} Campo pushSubscriptions: ${hasPushSubscriptions ? 'Presente' : 'Ausente'}`);
      
      if (!hasPushSubscriptions) {
        console.log('  üí° Campo ser√° adicionado automaticamente na primeira opera√ß√£o');
      }
    } else {
      console.log('  ‚ÑπÔ∏è  Nenhum usu√°rio encontrado para verifica√ß√£o');
    }

    // 5. Verificar √≠ndices
    console.log('\nüìá Verificando √≠ndices...');
    const userIndexes = await mongoose.connection.db.collection('users').indexes();
    console.log(`  üìä √çndices na cole√ß√£o users: ${userIndexes.length}`);

    // 6. Verificar permiss√µes de escrita
    console.log('\n‚úçÔ∏è  Verificando permiss√µes de escrita...');
    try {
      await mongoose.connection.db.collection('test_write').insertOne({ test: true });
      await mongoose.connection.db.collection('test_write').deleteOne({ test: true });
      console.log('  ‚úÖ Permiss√µes de escrita OK');
    } catch (error) {
      console.log('  ‚ùå Erro de permiss√µes de escrita:', error.message);
    }

    // 7. Verificar conectividade
    console.log('\nüåê Verificando conectividade...');
    const pingResult = await mongoose.connection.db.admin().ping();
    if (pingResult.ok === 1) {
      console.log('  ‚úÖ Conectividade OK');
    } else {
      console.log('  ‚ùå Problema de conectividade');
    }

    // 8. Verificar espa√ßo em disco (aproximado)
    console.log('\nüíæ Verificando espa√ßo em disco...');
    try {
      const stats = await mongoose.connection.db.stats();
      const sizeInMB = Math.round(stats.dataSize / 1024 / 1024);
      console.log(`  üìä Porte do banco: ${sizeInMB} MB`);
      
      if (sizeInMB < 100) {
        console.log('  ‚úÖ Espa√ßo em disco suficiente');
      } else {
        console.log('  ‚ö†Ô∏è  Banco de dados grande, considere otimiza√ß√µes');
      }
    } catch (error) {
      console.log('  ‚ÑπÔ∏è  N√£o foi poss√≠vel verificar tamanho do banco');
    }

    console.log('\nüéâ Verifica√ß√£o de compatibilidade conclu√≠da!');
    console.log('\nüìã Resumo:');
    console.log('  - MongoDB compat√≠vel com todas as funcionalidades');
    console.log('  - Novos modelos ser√£o criados automaticamente');
    console.log('  - Migra√ß√£o de dados ser√° necess√°ria');
    console.log('  - Execute: npm run migrate-notifications');

  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
    throw error;
  } finally {
    await mongoose.disconnect();
  }
}

// Executar verifica√ß√£o
if (require.main === module) {
  checkDatabaseCompatibility()
    .then(() => {
      console.log('\nüéØ Verifica√ß√£o finalizada!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Erro na verifica√ß√£o:', error);
      process.exit(1);
    });
}

module.exports = { checkDatabaseCompatibility };
